// twitter_telegram_bot/index.js

import dotenv from 'dotenv';
import { TwitterApi } from 'twitter-api-v2';
import TelegramBot from 'node-telegram-bot-api';
import translate from '@iamtraction/google-translate';

dotenv.config();

const twitter = new TwitterApi(process.env.TWITTER_BEARER_TOKEN);
const roClient = twitter.readOnly;

const bot = new TelegramBot(process.env.TELEGRAM_TOKEN, {
    polling: true,
    baseApiUrl: process.env.TELEGRAM_API_URL || 'https://api.telegram.org',
});

const TWITTER_USER_ID = process.env.TWITTER_USERID;
const TG_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

let lastSentId = null;

async function fetchTweets(count = 5) {
    try {
        const timeline = await roClient.v2.userTimeline(TWITTER_USER_ID, {
            max_results: count,
            'tweet.fields': ['created_at', 'text'],
            exclude: 'replies',
        });
        return timeline?.data?.data || [];
    } catch (err) {
        if (err.code === 429) {
            const reset = err.rateLimit?.reset
                ? new Date(err.rateLimit.reset * 1000).toLocaleTimeString()
                : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ –∫–æ–≥–¥–∞';
            console.warn(`‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –°–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø ${reset}`);
        } else {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–≤–∏—Ç–æ–≤:', err);
        }
        return [];
    }
}

async function checkAndSend() {
    try {
        const tweets = await fetchTweets(10); // —á–∏—Ç–∞–µ–º —á—É—Ç—å –±–æ–ª—å—à–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–≤–∏—Ç—ã

        if (!Array.isArray(tweets)) {
            console.error('‚ùå Tweets –Ω–µ –º–∞—Å—Å–∏–≤:', tweets);
            return;
        }

        // –û—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
        for (const tweet of tweets.reverse()) {
            if (lastSentId && BigInt(tweet.id) <= BigInt(lastSentId)) continue;

            let translated = '';
            try {
                const res = await translate(tweet.text, { to: 'ru' });
                translated = res.text;
            } catch (transErr) {
                console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:', transErr);
            }

            const msg = `üïì ${tweet.created_at}

üìå *–û—Ä–∏–≥–∏–Ω–∞–ª:*
${tweet.text}

üåê *–ü–µ—Ä–µ–≤–æ–¥:*
${translated}`;
            await bot.sendMessage(TG_CHAT_ID, msg, { parse_mode: 'Markdown' });
            lastSentId = tweet.id;
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –≤ checkAndSend():', err);
    }
}

bot.sendMessage(TG_CHAT_ID, 'üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');

(async () => {
    const latest = await fetchTweets(5);
    if (latest.length > 0) {
        lastSentId = latest[0].id;
        console.log(`üî∞ –ó–∞–ø—É—Å–∫. –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–≤–∏—Ç: ${lastSentId}`);
    }

    setInterval(checkAndSend, 15 * 60 * 1000);
    checkAndSend();
})();
